name: Generate/Upload all Coverage Reports

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  spring-boot:
    name: Create, format and upload Java coverage artifact
    runs-on: ubuntu-latest
    env:
      FILE_COUNTER: 0
      CC_TEST_REPORTER_ID: a54e7676b935f5cf8a5ed1646d6377f0308e2e1a9dc2f8c1e9c54f389aef9fe8

    steps:
      - name: Checkout PCSS Repository
        uses: actions/checkout@v2

      # Get Code Climate binary
      - name: Download Code Climate Binary
        run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter

      # Permissions applied to the Code Climate Executable
      - name: Apply executable perms to Code Climate Binary
        run: chmod +x ./cc-test-reporter

      # Before build
      - name: Before build
        run: ./cc-test-reporter before-build

      # Set required Git env vars for either pull request
      - name: Set ENV for codeclimate (pull_request)
        run: |
          echo "GIT_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        if: github.event_name == 'pull_request'

      # Set required Git env vars for a push to main
      - name: Set ENV for codeclimate (push)
        run: |
          echo "GIT_BRANCH=$GITHUB_REF" >> $GITHUB_ENV
          echo "GIT_COMMIT_SHA=$GITHUB_SHA" >> $GITHUB_ENV
        if: github.event_name == 'push'

      # Trimming the ref to main in order to publish correct report (paambaati)
      - name: Set ref/head/main to main
        run: |
          echo "GIT_BRANCH=main" >> $GITHUB_ENV
        if: env.GIT_BRANCH == 'refs/heads/main'

      # Setup Java Environment
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # Run Maven Verify to generate all jacoco reports
      - name: Build with Maven
        run: mvn -B verify -DBASIC_AUTH_PASS=${{ secrets.BASIC_AUTH_PASS }} -DBASIC_AUTH_USER=${{ secrets.BASIC_AUTH_USER }} -DORDS_HOST=${{ secrets.ORDS_HOST }} -DSPLUNK_HTTP_URL=${{ secrets.SPLUNK_HTTP_URL }} -DSPLUNK_INDEX=${{ secrets.SPLUNK_INDEX }} -DSPLUNK_TOKEN=${{ secrets.SPLUNK_TOKEN }}
        
      # Debug
      - name: DO I EXIST?
        run: | 
          ls pcss-criminal-application/target/site/jacoco
      
      # Debug
      - name: DO I EXIST PT.2
        run: |
          cat pcss-criminal-application/target/site/jacoco/jacoco.xml
    
      # Formatting the BACKEND coverage reports generated (dynamically)
      - name: Format BACKEND coverage reports
        run: |
          JACOCO_SOURCE_PATH=${{ github.workspace }}/pcss-criminal-application/target/site/jacoco ./cc-test-reporter format-coverage ${{ github.workspace }}/pcss-criminal-application/target/site/jacoco/jacoco.xml -t jacoco -o coverage/efax-codeclimate.json;
      # List all formatted files in coverage directory
      - name: WHERE AM I - FORMATTED?
        run: |
          ls ${{ github.workspace }}/coverage
        if: ${{ env.ACTION_DEBUG }}

      # Count of all total coverage files available
      - name: Count files present
        run: |
          echo "FILE_COUNTER=$(ls -1q ./coverage | wc -l )" >> $GITHUB_ENV
          #echo "::set-env name=FILE_COUNTER::$(ls -1q ./coverage | wc -l )"
      # Upload JSON for debugging purposes
      - name: Upload JSON for debugging purposes
        uses: actions/upload-artifact@v2
        with:
          name: summed-java-coverage-report
          path: coverage/codeclimate-api.json

      # Upload total coverage report to Code Climate
      - name: Upload coverage report to Code Climate
        run: ./cc-test-reporter upload-coverage -d -i coverage/codeclimate-api.json
